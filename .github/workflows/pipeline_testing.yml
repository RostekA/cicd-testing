# This is a basic workflow to help you get started with Actions

name: Testing

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # for running manually
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Test
        run: |
          echo "I am on MAIN"
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install prod dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dev dependencies
        run: |
          pip install -r requirements-dev.txt

      #      - name: Run tests
      #        run: |
      #          pytest tests/

      - name: Run tests
        run: pytest --junit-xml=test-results.xml

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          # A list of JUnit XML files, directories containing the former, and wildcard
          # patterns to process.
          # See @actions/glob for supported patterns.
          path: test-results.xml



      #      - name: Upload pytest HTML report
      #        uses: actions/upload-artifacts@v2
      #        with:
      #          name: pytest-report
      #          path: report.html

      - name: Run Static Code Analysis
        run: |
          pylint **/*.py
        continue-on-error: true

      - name: Run Type Checks
        run: |
          mypy .
        continue-on-error: true

      - name: Run Safety Check (vulnerabilities in libraries)
        run: |
          safety check
        continue-on-error: true

      - name: Run Security Check
        run: |
          bandit -r src
        continue-on-error: true

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t my-image-name:latest .

      - name: List Docker images
        run: |
          echo "Listing Docker images..."
          docker images